#!/usr/bin/env node

const { program } = require('commander')
const package = require('../package.json')
const path = require('path')
const cucumber = require('cucumber')
const Cli = require('../src/cli')
const logger = require('../src/utils/logger')

program
  .version(package.version)

program
  .command('init')
  .option('-y', 'Initialize with default values')
  .description('Initialize a new RestQA project')
  .action(Cli.initialize)

program
  .command('install [name]')
  .alias('i')
  .description('Install an addon to your project')
  .action(Cli.install)


program
  .command('steps [keyword]')
  .alias('st')
  .option('-c, --config <config>', 'Use a specific .restqa.yml file')
  .option('-t, --tag <tag>', 'Filter the step definition by tag')
  .description('Get the list of step by keyword : given | when | then')
  .action(Cli.steps)

program
  .command('run')
  .alias('r')
  .option('-e, --env <env>', 'Define the current environment')
  .option('-c, --config <config>', 'Use a specific .restqa.yml file')
  .description('Get the list of step by keyword : given | when | then')
  .action(Cli.run)

program
  .command('generate')
  .alias('gen')
  .allowUnknownOption()
  .option('--print', 'Print the result', true)
  .description('Generate a Test scenario from a curl command')
  .usage("[global options] command")
  .action(Cli.generate)

program.on('--help', () => {
  /* eslint-disable no-console */
  logger.log(
    '  For more details please visit https://github.com/resqa/restqapi'
  )
  /* eslint-enable no-console */
})

async function main() {
  return program.parseAsync(process.argv)
}

main()
  .then( _program => {
  let cmd  = _program.commands.find(_ => _.restqa)
   if (cmd) Run(cmd)
 })
 .catch(e => {
   logger.error('> ', e.message)
 })

function Run(cmd) {
let {env, config, paths} = cmd.restqa

// TODO : Add extra cucumber parameters from config file

let customOptions = [
  'node',
  'cucumber-js',
  '--require',
  './src/setup.js',
  '--format',
  './src/restqa-formatter:.restqa.log',
  '--format-options',
  '{"snippetSyntax": "./src/restqa-snippet.js"}'
]

const options  = {
  argv: customOptions.concat(paths),
  cwd: path.join(__dirname, '../'),
  stdout: process.stdout
}

const cucumberCli = new cucumber.Cli(options);

cucumberCli.run()
  .then(result => {
    const exitCode = result.success ? 0 : 1
    if (result.shouldExitImmediately) {
      process.exit(exitCode)
    } else {
      process.exitCode = exitCode
    }
  })
  .catch(err => {
    logger.error(err) // eslint-disable-line no-console
    process.exit(1)
  })
}
